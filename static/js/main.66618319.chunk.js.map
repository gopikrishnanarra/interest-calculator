{"version":3,"sources":["calculator.js","App.js","serviceWorker.js","index.js"],"names":["Calculator","props","state","amount","interest","paying","nextPayment","payments","interests","e","this","setState","target","value","interest1","i","parseInt","toFixed","className","type","onChange","addAmount","addInterest","addPayment","disabled","call","onClick","getInterestPerDay","length","reduce","a","b","parseFloat","map","balance","indexOf","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.66618319.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\nexport default class Calculator extends Component {\n      constructor(props) {\n          super(props);\n          this.state = {\n              amount: 0,\n              interest: 0,\n              paying: 0,\n              nextPayment: 0,\n              payments: [],\n              interests: []\n          }\n      }\n    addAmount(e) {\n        this.setState({\n            amount: e.target.value\n        })\n    }\n    addInterest(e) {\n        this.setState({\n            interest: e.target.value\n        })\n    }\n    addPayment(e) {\n        this.setState({\n            paying: e.target.value\n        })\n    }\n    getInterestPerDay() {\n        let payments = [];\n        let interests = [];\n        let nextPayment = 0;\n        const interest1 = ((this.state.amount * this.state.interest) / 100) / 12;\n        for(let i = 0; i <= 100; i++ ) {\n            if (nextPayment >= 0) {\n                if (i === 0) {\n                    payments[i] = parseInt(this.state.amount);\n                    interests[i] = interest1.toFixed(3);\n                    nextPayment = ((parseInt(this.state.amount) + interest1) - parseInt(this.state.paying))\n                }\n                if (i !== 0) {\n                    payments[i] = parseInt(nextPayment);\n                    const interest = ((payments[i] * this.state.interest) / 100) / 12;\n                    interests[i] = interest.toFixed(3);\n                    nextPayment = interest + payments[i] - parseInt(this.state.paying)\n                }\n            }\n        }\n        this.setState({\n            payments: payments,\n            interests: interests\n        });\n    }\n\n\nrender() {\n          function getMonthsBalanceData() {\n              return this.state.payments.map(balance => {\n                  return ( <tr className=\"td\">\n                      <td className=\"td\">{this.state.payments.indexOf(balance)}</td>\n                      <td className=\"td\">{balance}</td>\n                      <td className=\"td\">{this.state.interests[this.state.payments.indexOf(balance)]}</td>\n                  </tr>)\n          })\n          }\n          function isButtonDisabled() {\n              return !this.state.amount || !this.state.paying || !this.state.interest\n          }\n    return (\n              <div>\n                  <div>\n                          <h5 className=\"h5\">enter remaining amount</h5>\n                        <input type=\"number\" onChange={(e) => this.addAmount(e)}/>\n                  </div>\n                  <div>\n                         <h5 className=\"h5\">enter interest rate</h5>\n                        <input type=\"number\" onChange={(e) => this.addInterest(e)}/>\n                  </div>\n                  <div>\n                     <h5 className=\"h5\">amount you want to pay monthly</h5>\n                     <input type=\"number\" onChange={(e) => this.addPayment(e)}/>\n                  </div>\n                  <button disabled={isButtonDisabled.call(this)} onClick={() => this.getInterestPerDay()}>get payments</button>\n\n                  {this.state.payments.length > 0 &&\n                  <div>\n                  <h2>Balance</h2>\n                  <h3>You will finish the financing in {this.state.payments.length} months at rate\n                      of {this.state.paying}/month</h3>\n                  <h3>Total interest paying {this.state.interests.reduce((a,b) => parseFloat(a) + parseFloat(b), 0).toFixed(2)}</h3>\n                  this table will show maximum of 100 payments\n                  <table className=\"table\">\n                      <tbody>\n                      <tr className=\"td\">\n                          <th className=\"th\">payment months from today</th>\n                          <th className=\"th\">balance remained</th>\n                          <th className=\"th\">interest added</th>\n                      </tr>\n                      {getMonthsBalanceData.call(this)}\n                      </tbody>\n                  </table>\n                  </div>\n                  }\n              </div>\n          )\n}\n}\n","import React from 'react';\nimport './App.css';\nimport Calculator from './calculator'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Calculator/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}